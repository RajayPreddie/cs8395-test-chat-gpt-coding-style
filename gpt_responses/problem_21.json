{
    "id": "problem_21",
    "description": "",
    "code": "# Program to convert code written in an unidiomatic style to a more \n# idiomatic style of Python\n\n# This program prompts the user to input code written in an unidiomatic style\n# and then prints out the code written in a more idiomatic style\n\n#importing the regex library to use for finding and replacing strings\nimport re\n\n#Function to convert code from unidiomatic to idiomatic style\ndef convert_code(code):\n    #replacing \"if x == True\" with \"if x\"\n    code = re.sub(r'if (.*) == True', r'if \\1', code)\n    #replacing \"if x == False\" with \"if not x\"\n    code = re.sub(r'if (.*) == False', r'if not \\1', code)\n    #replacing \"for i in range(0, x)\" with \"for i in range(x)\"\n    code = re.sub(r'for (.*) in range\\(0, (.*)\\)', r'for \\1 in range(\\2)', code)\n    #replacing \"x = x + 1\" with \"x += 1\"\n    code = re.sub(r'(.*) = (.*) \\+ (.*)', r'\\1 += \\3', code)\n    #replacing \"x = x - 1\" with \"x -= 1\"\n    code = re.sub(r'(.*) = (.*) \\- (.*)', r'\\1 -= \\3', code)\n    #replacing \"len(x)\" with \"x.length\"\n    code = re.sub(r'len\\((.*)\\)', r'\\1.length', code)\n    #replacing \"x[i]\" with \"x[i:i+1]\"\n    code = re.sub(r'(.*)\\[(.*)\\]', r'\\1[\\2: \\2 + 1]', code)\n    #replacing \"x[i] = y\" with \"x[i:i+1] = [y]\"\n    code = re.sub(r'(.*)\\[(.*)\\] = (.*)', r'\\1[\\2: \\2 + 1] = [\\3]', code)\n    #replacing \"x[i:j]\" with \"x[i:j+1]\"\n    code = re.sub(r'(.*)\\[(.*):(.*)\\]', r'\\1[\\2:\\3 + 1]', code)\n    #replacing \"x[i:j] = y\" with \"x[i:j+1] = [y]\"\n    code = re.sub(r'(.*)\\[(.*):(.*)\\] = (.*)', r'\\1[\\2:\\3 + 1] = [\\4]', code)\n    #returning the newly converted code\n    return code\n\n#Prompting the user to input code written in an unidiomatic style\ncode = input(\"Please enter code written in an unidiomatic style: \")\n\n#Printing the code written in a more idiomatic style\nprint(\"Here is the code written in a more idiomatic style:\")\nprint(convert_code(code))",
    "tags": [
        "IdiomaticPython",
        "Easy"
    ],
    "keywords": [
        "IdiomaticPython"
    ],
    "difficulty": "Easy"
}